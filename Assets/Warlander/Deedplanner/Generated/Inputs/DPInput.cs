//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Prefabs/Input/DPInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Warlander.Deedplanner.Inputs
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Prefabs/Input/DPInput.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @DPInput: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @DPInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""DPInput"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""01811832-bafd-4026-91e9-36cdad652006"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0d15b48d-97c3-4a68-be4b-3c57b39a31c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""1dc185e1-0f90-40df-97cf-5845ed66f2e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""628fb65b-2a9b-46d9-b13c-ad9332dc498b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""618c2391-a9a6-4c95-bdc9-88eb2dac1beb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fbe0c05c-5d72-4e4a-8fb3-eb3ebeb12bff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cf9c5456-2540-4561-a44a-4b603a007d90"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""704467c2-8a48-4a0c-b575-0bdbf64380b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6e47436e-8c76-434b-b510-743d8ffd7c7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""384abfbe-a4b5-4790-8013-ff73ee2dd503"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fe45e3f2-e84f-4ad1-b14b-36099297fc59"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""58ab4467-a907-4a4a-ad28-6df6f3c1ff34"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b0fd52e-bdcd-4e20-93dc-0a8d74433a01"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""77a49f8b-eb1e-42bf-b34b-f3e33ae60ef5"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc12645d-a164-4097-8617-75b1df9a1172"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""817b7dbb-34cb-4e6f-868d-bd6630633022"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e2e527ec-9eb5-4eb0-8b9d-136d0224368d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dba4b6c0-366c-42d2-abd5-32b62cbb99a2"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6874b253-52ac-4c42-9c7c-9528c2e2894c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8017faa6-2370-40a0-8873-d6941acb17de"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""52805d8f-a58f-4682-aa50-3d35230a5e27"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""19928bb0-e89e-49ea-82dd-edb6d6150883"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""93a234a9-ce08-4df4-81c8-7e83c5fda417"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbe4e269-7243-4cbb-9873-f77a7e38f988"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c235ed29-2edb-4196-99a3-c24fe5520c53"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4cf09f83-de84-4ab5-9118-05f85b7ce0fa"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""fc047803-681d-45c7-b910-d2a2671375dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c615816f-6d3c-4265-91dd-72a2c2c727cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ffcfd809-90cb-491f-9720-c1652d64c6a8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c5ca2569-e030-4b79-b33f-036ccded7aa4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""79d9050d-43e9-4004-ada6-4ceec144e794"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""14673cb6-3ee9-4924-8561-83b2674d1a9d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3c3b9072-f5fa-4ce7-838c-f59da4b3b100"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""376c0343-ca29-4802-a21d-c576dae8fbc9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db43642d-505e-419b-846a-44dc5407c2f5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7559d593-22f5-4c20-9002-dd61de48988b"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Gamepad;Touch;Joystick;XR"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cea97894-3039-4735-a192-424d57c09ab0"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Gamepad;Touch;Joystick;XR"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d9420b5-660c-44ef-aa86-dc10e7cb8eb5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8741427-2d96-452a-98d0-9b40209e1d71"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f54f92e0-9dfb-428e-84e8-67d8c86f4630"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92e2ffe5-f1e1-4d79-8b38-afcd252f5bf0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5154393e-3b31-4a8f-b73f-ddad24421320"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20f861a3-109c-4ed9-b2ce-b0a018cdcf22"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97b43ff0-0f80-42f3-8fe0-f618a1e8329e"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""614f68d9-9d6f-4b27-87e7-65805afd037d"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61669407-6846-4995-b481-c5fb8bc09bb1"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23b83414-dcb8-48e8-b2e7-72e9dc4ab2ce"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f44be61-9bcb-4c34-8c15-e9dc63ada25c"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""TrackedDevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0193cdcb-18b3-46aa-8c8c-110857ec0a7d"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""TrackedDeviceOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map Input Shared"",
            ""id"": ""05536137-e996-4986-a473-384875a6bd7f"",
            ""actions"": [
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""17bfb7ae-f45f-4a49-9b77-36afe6b3e605"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt Boost"",
                    ""type"": ""Button"",
                    ""id"": ""30e2d9b8-f06e-48d0-92a5-1684f683ad36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus Position"",
                    ""type"": ""Value"",
                    ""id"": ""cb61d857-6de3-40cb-9de4-68adb3ee47df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""91004101-fd27-4c8a-8e9a-6681dea99b90"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b68ea20-16b1-42e9-bd91-640efcd661a6"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Alt Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""122b8e20-df3a-4234-99a5-6b3119e39932"",
                    ""path"": ""<Keyboard>/leftMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Alt Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76e68da3-2d69-4cab-a64d-3e05d17ae87a"",
                    ""path"": ""<Keyboard>/rightMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Alt Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f116e40-fb2a-475a-91f5-0f3b9d80f735"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Focus Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map Input 2D"",
            ""id"": ""854db249-95e9-42a0-9f9b-0e632925bfc2"",
            ""actions"": [
                {
                    ""name"": ""Move Map"",
                    ""type"": ""Value"",
                    ""id"": ""d60b08f2-1793-4ea3-a126-54027b6b8c9f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom In/Out"",
                    ""type"": ""Value"",
                    ""id"": ""61c03a73-4c7b-4b4e-8048-aa854f55b3c6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn Camera Clockwise"",
                    ""type"": ""Button"",
                    ""id"": ""971d7499-f1cc-408e-bf14-c50ab91170e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn Camera Counterclockwise"",
                    ""type"": ""Button"",
                    ""id"": ""4d242828-50ae-490a-9306-64a7acce0b68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b8e6b19c-c24e-453e-9418-f49e027b623f"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Map"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba019ddb-3bce-40a6-80f2-769ad0035c97"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0a87a36b-1aa9-475d-89ee-66fcb39d53d0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fba89cf8-595a-40f4-9f8c-c5293aaed961"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""692bcd98-07c4-4178-9aab-f01bfe627b32"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""928bba72-63c6-42ea-b3db-41802469ee13"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom In/Out"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f1a0234b-5868-4126-8577-62d4dfe7b15c"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Zoom In/Out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9a0dd726-54ef-4bea-9241-343c951cfd4c"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Zoom In/Out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7227c03f-9a4b-48eb-bab7-8d05cbd4fcb2"",
                    ""path"": ""<Keyboard>/pageDown"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Turn Camera Clockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42d7e480-a2f6-44f2-ac3b-c3dfe10b5e35"",
                    ""path"": ""<Keyboard>/pageUp"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Turn Camera Counterclockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map Input 3D"",
            ""id"": ""35620df3-4660-49f6-b73b-d63dcd26c6b3"",
            ""actions"": [
                {
                    ""name"": ""Move Map"",
                    ""type"": ""Value"",
                    ""id"": ""42b80f79-9b11-4f78-85d1-75caac396755"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Sideways"",
                    ""type"": ""Value"",
                    ""id"": ""97d73a08-4c9f-4af4-a38f-c179a5e3cf7c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move Vertically"",
                    ""type"": ""Value"",
                    ""id"": ""96170746-75a5-4ae4-8732-b9be64d3391a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a8f8ace2-083a-4391-b9a1-7384b5d577f2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Sideways"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7666a4b0-e9a0-43de-a8b4-d62f9564600a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Rotate Sideways"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bbb93222-64be-473b-92d2-2aa51a675186"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Rotate Sideways"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""634bc615-f3b4-4669-be49-ea31afba30cb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Vertically"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""405b811c-f8ac-4aa4-8a30-9ea6f70bc6bd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Vertically"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""35476977-4968-4aef-90fe-0201f21809c4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Vertically"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""11d579cc-150a-4b5f-abca-7d84a9047a26"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Map"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d8121ffd-a929-4446-8de5-cd0857bfeac2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04967ef0-178f-4f78-b44c-4285a4aab1ee"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3ee8f161-e152-4635-bff7-6dd9fea6fe91"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d65727ee-abf0-472c-b23a-927952e55e1c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Editing Controls"",
            ""id"": ""9b77110c-700e-459b-8888-9d0c7f0c6321"",
            ""actions"": [
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""6c94caed-5fdb-41fb-a547-e16a9685e09c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redo"",
                    ""type"": ""Button"",
                    ""id"": ""e7a593a5-942b-4f7b-b0a2-586058faa3b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle UI"",
                    ""type"": ""Button"",
                    ""id"": ""784e38f2-36cc-448a-8bc2-c8feacb53698"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2ec74565-7aef-4318-b031-825f0c90458e"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""42cf481e-0a39-478f-b6b3-cff5ebf12792"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""abd7563b-3e05-4995-92b6-d6cdd8a8cd2c"",
                    ""path"": ""<Keyboard>/leftMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""012fefd6-c21b-43ec-996d-24986bf18f06"",
                    ""path"": ""<Keyboard>/rightMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ad0e0b5a-3e83-4baa-b693-3ef17259aaf9"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""a6e706c9-cca5-4fdd-8177-e1a1bddbea77"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""dc050f42-bc41-4d67-b1fd-c8aedb18e98b"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""347dae24-d53c-4bdb-84e8-ee367de22d4b"",
                    ""path"": ""<Keyboard>/leftMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""60c82b28-c447-4ec2-85b1-47751d2802a0"",
                    ""path"": ""<Keyboard>/rightMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""7702abf3-6274-4a58-af03-769e7c3a2516"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a30a7813-7000-4bc0-8c40-fb3c41226135"",
                    ""path"": ""<Keyboard>/f10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Toggle UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Updaters Shared"",
            ""id"": ""9baf9b14-e2d3-42bc-92fd-bcbe389df51b"",
            ""actions"": [
                {
                    ""name"": ""Placement"",
                    ""type"": ""Value"",
                    ""id"": ""5eaff5a9-aee0-4d6b-b7ee-304e405a11e9"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Deletion"",
                    ""type"": ""Value"",
                    ""id"": ""ceadc98a-63d4-49fa-a206-d411d720d063"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1bf4d71-b4d1-4e86-bfd8-e398b41e5191"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Placement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06e1c7b0-8912-417b-8dd4-39887b66b8e4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Deletion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ground Updater"",
            ""id"": ""14c71b29-8c4d-4c85-a9bc-a763f93d7ed4"",
            ""actions"": [
                {
                    ""name"": ""Pick Tile"",
                    ""type"": ""Button"",
                    ""id"": ""dc4d947b-e81f-4043-8480-1c93255f3521"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30536ec3-6f95-4d47-aeee-2403378380c1"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Pick Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Height Updater"",
            ""id"": ""b2ce9885-ece8-4973-b14f-bfecf1bf99e7"",
            ""actions"": [
                {
                    ""name"": ""Drag Selection"",
                    ""type"": ""Button"",
                    ""id"": ""bbeafc3a-42be-4bd2-bb82-f09fc5dfaac8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9460d947-472d-4710-8307-188794e40b72"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Drag Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Decoration Updater"",
            ""id"": ""16f30c85-6b23-4d61-a85b-a107507a1b98"",
            ""actions"": [
                {
                    ""name"": ""Delete Single Object"",
                    ""type"": ""Button"",
                    ""id"": ""9b83d5c5-c3df-4e6d-914e-05d288da5fa2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Smooth Object Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""43ae78e7-2763-4f89-aa61-d95a42d361ae"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Snappy Object Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""6433287a-cba0-40ec-a05a-10fe7787b3b5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94d41bdb-262e-47aa-9b90-10d0032c5f0a"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Delete Single Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""700d3886-cf75-486a-8df8-4faa5fd9c4cb"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Smooth Object Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""d2a4ecb2-8bac-450d-a70c-c433c48b5ad9"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Smooth Object Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""e2a9c45d-91e2-4c12-8d1d-808a90356336"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Smooth Object Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""f5b82b1f-df9c-4321-8388-e99c8838b1bb"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snappy Object Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""c3d90cbf-1a10-4582-893d-de995b5e0143"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Snappy Object Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""022b4bdf-134c-4090-aa38-7f4c88815386"",
                    ""path"": ""<Keyboard>/leftMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Snappy Object Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""a1481151-d3f8-4593-8b3f-f27e3721205f"",
                    ""path"": ""<Keyboard>/rightMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Snappy Object Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""edd9535e-c675-4726-b6b2-88b86a4d3394"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Snappy Object Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
            m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
            m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
            m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
            m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
            m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
            m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
            m_UI_TrackedDevicePosition = m_UI.FindAction("TrackedDevicePosition", throwIfNotFound: true);
            m_UI_TrackedDeviceOrientation = m_UI.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
            // Map Input Shared
            m_MapInputShared = asset.FindActionMap("Map Input Shared", throwIfNotFound: true);
            m_MapInputShared_Boost = m_MapInputShared.FindAction("Boost", throwIfNotFound: true);
            m_MapInputShared_AltBoost = m_MapInputShared.FindAction("Alt Boost", throwIfNotFound: true);
            m_MapInputShared_FocusPosition = m_MapInputShared.FindAction("Focus Position", throwIfNotFound: true);
            // Map Input 2D
            m_MapInput2D = asset.FindActionMap("Map Input 2D", throwIfNotFound: true);
            m_MapInput2D_MoveMap = m_MapInput2D.FindAction("Move Map", throwIfNotFound: true);
            m_MapInput2D_ZoomInOut = m_MapInput2D.FindAction("Zoom In/Out", throwIfNotFound: true);
            m_MapInput2D_TurnCameraClockwise = m_MapInput2D.FindAction("Turn Camera Clockwise", throwIfNotFound: true);
            m_MapInput2D_TurnCameraCounterclockwise = m_MapInput2D.FindAction("Turn Camera Counterclockwise", throwIfNotFound: true);
            // Map Input 3D
            m_MapInput3D = asset.FindActionMap("Map Input 3D", throwIfNotFound: true);
            m_MapInput3D_MoveMap = m_MapInput3D.FindAction("Move Map", throwIfNotFound: true);
            m_MapInput3D_RotateSideways = m_MapInput3D.FindAction("Rotate Sideways", throwIfNotFound: true);
            m_MapInput3D_MoveVertically = m_MapInput3D.FindAction("Move Vertically", throwIfNotFound: true);
            // Editing Controls
            m_EditingControls = asset.FindActionMap("Editing Controls", throwIfNotFound: true);
            m_EditingControls_Undo = m_EditingControls.FindAction("Undo", throwIfNotFound: true);
            m_EditingControls_Redo = m_EditingControls.FindAction("Redo", throwIfNotFound: true);
            m_EditingControls_ToggleUI = m_EditingControls.FindAction("Toggle UI", throwIfNotFound: true);
            // Updaters Shared
            m_UpdatersShared = asset.FindActionMap("Updaters Shared", throwIfNotFound: true);
            m_UpdatersShared_Placement = m_UpdatersShared.FindAction("Placement", throwIfNotFound: true);
            m_UpdatersShared_Deletion = m_UpdatersShared.FindAction("Deletion", throwIfNotFound: true);
            // Ground Updater
            m_GroundUpdater = asset.FindActionMap("Ground Updater", throwIfNotFound: true);
            m_GroundUpdater_PickTile = m_GroundUpdater.FindAction("Pick Tile", throwIfNotFound: true);
            // Height Updater
            m_HeightUpdater = asset.FindActionMap("Height Updater", throwIfNotFound: true);
            m_HeightUpdater_DragSelection = m_HeightUpdater.FindAction("Drag Selection", throwIfNotFound: true);
            // Decoration Updater
            m_DecorationUpdater = asset.FindActionMap("Decoration Updater", throwIfNotFound: true);
            m_DecorationUpdater_DeleteSingleObject = m_DecorationUpdater.FindAction("Delete Single Object", throwIfNotFound: true);
            m_DecorationUpdater_SmoothObjectRotate = m_DecorationUpdater.FindAction("Smooth Object Rotate", throwIfNotFound: true);
            m_DecorationUpdater_SnappyObjectRotate = m_DecorationUpdater.FindAction("Snappy Object Rotate", throwIfNotFound: true);
        }

        ~@DPInput()
        {
            UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, DPInput.UI.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_MapInputShared.enabled, "This will cause a leak and performance issues, DPInput.MapInputShared.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_MapInput2D.enabled, "This will cause a leak and performance issues, DPInput.MapInput2D.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_MapInput3D.enabled, "This will cause a leak and performance issues, DPInput.MapInput3D.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_EditingControls.enabled, "This will cause a leak and performance issues, DPInput.EditingControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_UpdatersShared.enabled, "This will cause a leak and performance issues, DPInput.UpdatersShared.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_GroundUpdater.enabled, "This will cause a leak and performance issues, DPInput.GroundUpdater.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_HeightUpdater.enabled, "This will cause a leak and performance issues, DPInput.HeightUpdater.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_DecorationUpdater.enabled, "This will cause a leak and performance issues, DPInput.DecorationUpdater.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Navigate;
        private readonly InputAction m_UI_Submit;
        private readonly InputAction m_UI_Cancel;
        private readonly InputAction m_UI_Point;
        private readonly InputAction m_UI_Click;
        private readonly InputAction m_UI_ScrollWheel;
        private readonly InputAction m_UI_MiddleClick;
        private readonly InputAction m_UI_RightClick;
        private readonly InputAction m_UI_TrackedDevicePosition;
        private readonly InputAction m_UI_TrackedDeviceOrientation;
        /// <summary>
        /// Provides access to input actions defined in input action map "UI".
        /// </summary>
        public struct UIActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public UIActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "UI/Navigate".
            /// </summary>
            public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
            /// <summary>
            /// Provides access to the underlying input action "UI/Submit".
            /// </summary>
            public InputAction @Submit => m_Wrapper.m_UI_Submit;
            /// <summary>
            /// Provides access to the underlying input action "UI/Cancel".
            /// </summary>
            public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
            /// <summary>
            /// Provides access to the underlying input action "UI/Point".
            /// </summary>
            public InputAction @Point => m_Wrapper.m_UI_Point;
            /// <summary>
            /// Provides access to the underlying input action "UI/Click".
            /// </summary>
            public InputAction @Click => m_Wrapper.m_UI_Click;
            /// <summary>
            /// Provides access to the underlying input action "UI/ScrollWheel".
            /// </summary>
            public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
            /// <summary>
            /// Provides access to the underlying input action "UI/MiddleClick".
            /// </summary>
            public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
            /// <summary>
            /// Provides access to the underlying input action "UI/RightClick".
            /// </summary>
            public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
            /// <summary>
            /// Provides access to the underlying input action "UI/TrackedDevicePosition".
            /// </summary>
            public InputAction @TrackedDevicePosition => m_Wrapper.m_UI_TrackedDevicePosition;
            /// <summary>
            /// Provides access to the underlying input action "UI/TrackedDeviceOrientation".
            /// </summary>
            public InputAction @TrackedDeviceOrientation => m_Wrapper.m_UI_TrackedDeviceOrientation;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="UIActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="UIActions" />
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="UIActions" />
            private void UnregisterCallbacks(IUIActions instance)
            {
                @Navigate.started -= instance.OnNavigate;
                @Navigate.performed -= instance.OnNavigate;
                @Navigate.canceled -= instance.OnNavigate;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @ScrollWheel.started -= instance.OnScrollWheel;
                @ScrollWheel.performed -= instance.OnScrollWheel;
                @ScrollWheel.canceled -= instance.OnScrollWheel;
                @MiddleClick.started -= instance.OnMiddleClick;
                @MiddleClick.performed -= instance.OnMiddleClick;
                @MiddleClick.canceled -= instance.OnMiddleClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @TrackedDevicePosition.started -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled -= instance.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled -= instance.OnTrackedDeviceOrientation;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIActions.UnregisterCallbacks(IUIActions)" />.
            /// </summary>
            /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
            /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
            /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="UIActions" /> instance referencing this action map.
        /// </summary>
        public UIActions @UI => new UIActions(this);

        // Map Input Shared
        private readonly InputActionMap m_MapInputShared;
        private List<IMapInputSharedActions> m_MapInputSharedActionsCallbackInterfaces = new List<IMapInputSharedActions>();
        private readonly InputAction m_MapInputShared_Boost;
        private readonly InputAction m_MapInputShared_AltBoost;
        private readonly InputAction m_MapInputShared_FocusPosition;
        /// <summary>
        /// Provides access to input actions defined in input action map "Map Input Shared".
        /// </summary>
        public struct MapInputSharedActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public MapInputSharedActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "MapInputShared/Boost".
            /// </summary>
            public InputAction @Boost => m_Wrapper.m_MapInputShared_Boost;
            /// <summary>
            /// Provides access to the underlying input action "MapInputShared/AltBoost".
            /// </summary>
            public InputAction @AltBoost => m_Wrapper.m_MapInputShared_AltBoost;
            /// <summary>
            /// Provides access to the underlying input action "MapInputShared/FocusPosition".
            /// </summary>
            public InputAction @FocusPosition => m_Wrapper.m_MapInputShared_FocusPosition;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_MapInputShared; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="MapInputSharedActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(MapInputSharedActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="MapInputSharedActions" />
            public void AddCallbacks(IMapInputSharedActions instance)
            {
                if (instance == null || m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Add(instance);
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @AltBoost.started += instance.OnAltBoost;
                @AltBoost.performed += instance.OnAltBoost;
                @AltBoost.canceled += instance.OnAltBoost;
                @FocusPosition.started += instance.OnFocusPosition;
                @FocusPosition.performed += instance.OnFocusPosition;
                @FocusPosition.canceled += instance.OnFocusPosition;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="MapInputSharedActions" />
            private void UnregisterCallbacks(IMapInputSharedActions instance)
            {
                @Boost.started -= instance.OnBoost;
                @Boost.performed -= instance.OnBoost;
                @Boost.canceled -= instance.OnBoost;
                @AltBoost.started -= instance.OnAltBoost;
                @AltBoost.performed -= instance.OnAltBoost;
                @AltBoost.canceled -= instance.OnAltBoost;
                @FocusPosition.started -= instance.OnFocusPosition;
                @FocusPosition.performed -= instance.OnFocusPosition;
                @FocusPosition.canceled -= instance.OnFocusPosition;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MapInputSharedActions.UnregisterCallbacks(IMapInputSharedActions)" />.
            /// </summary>
            /// <seealso cref="MapInputSharedActions.UnregisterCallbacks(IMapInputSharedActions)" />
            public void RemoveCallbacks(IMapInputSharedActions instance)
            {
                if (m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="MapInputSharedActions.AddCallbacks(IMapInputSharedActions)" />
            /// <seealso cref="MapInputSharedActions.RemoveCallbacks(IMapInputSharedActions)" />
            /// <seealso cref="MapInputSharedActions.UnregisterCallbacks(IMapInputSharedActions)" />
            public void SetCallbacks(IMapInputSharedActions instance)
            {
                foreach (var item in m_Wrapper.m_MapInputSharedActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="MapInputSharedActions" /> instance referencing this action map.
        /// </summary>
        public MapInputSharedActions @MapInputShared => new MapInputSharedActions(this);

        // Map Input 2D
        private readonly InputActionMap m_MapInput2D;
        private List<IMapInput2DActions> m_MapInput2DActionsCallbackInterfaces = new List<IMapInput2DActions>();
        private readonly InputAction m_MapInput2D_MoveMap;
        private readonly InputAction m_MapInput2D_ZoomInOut;
        private readonly InputAction m_MapInput2D_TurnCameraClockwise;
        private readonly InputAction m_MapInput2D_TurnCameraCounterclockwise;
        /// <summary>
        /// Provides access to input actions defined in input action map "Map Input 2D".
        /// </summary>
        public struct MapInput2DActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public MapInput2DActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "MapInput2D/MoveMap".
            /// </summary>
            public InputAction @MoveMap => m_Wrapper.m_MapInput2D_MoveMap;
            /// <summary>
            /// Provides access to the underlying input action "MapInput2D/ZoomInOut".
            /// </summary>
            public InputAction @ZoomInOut => m_Wrapper.m_MapInput2D_ZoomInOut;
            /// <summary>
            /// Provides access to the underlying input action "MapInput2D/TurnCameraClockwise".
            /// </summary>
            public InputAction @TurnCameraClockwise => m_Wrapper.m_MapInput2D_TurnCameraClockwise;
            /// <summary>
            /// Provides access to the underlying input action "MapInput2D/TurnCameraCounterclockwise".
            /// </summary>
            public InputAction @TurnCameraCounterclockwise => m_Wrapper.m_MapInput2D_TurnCameraCounterclockwise;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_MapInput2D; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="MapInput2DActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(MapInput2DActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="MapInput2DActions" />
            public void AddCallbacks(IMapInput2DActions instance)
            {
                if (instance == null || m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Add(instance);
                @MoveMap.started += instance.OnMoveMap;
                @MoveMap.performed += instance.OnMoveMap;
                @MoveMap.canceled += instance.OnMoveMap;
                @ZoomInOut.started += instance.OnZoomInOut;
                @ZoomInOut.performed += instance.OnZoomInOut;
                @ZoomInOut.canceled += instance.OnZoomInOut;
                @TurnCameraClockwise.started += instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.performed += instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.canceled += instance.OnTurnCameraClockwise;
                @TurnCameraCounterclockwise.started += instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.performed += instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.canceled += instance.OnTurnCameraCounterclockwise;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="MapInput2DActions" />
            private void UnregisterCallbacks(IMapInput2DActions instance)
            {
                @MoveMap.started -= instance.OnMoveMap;
                @MoveMap.performed -= instance.OnMoveMap;
                @MoveMap.canceled -= instance.OnMoveMap;
                @ZoomInOut.started -= instance.OnZoomInOut;
                @ZoomInOut.performed -= instance.OnZoomInOut;
                @ZoomInOut.canceled -= instance.OnZoomInOut;
                @TurnCameraClockwise.started -= instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.performed -= instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.canceled -= instance.OnTurnCameraClockwise;
                @TurnCameraCounterclockwise.started -= instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.performed -= instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.canceled -= instance.OnTurnCameraCounterclockwise;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MapInput2DActions.UnregisterCallbacks(IMapInput2DActions)" />.
            /// </summary>
            /// <seealso cref="MapInput2DActions.UnregisterCallbacks(IMapInput2DActions)" />
            public void RemoveCallbacks(IMapInput2DActions instance)
            {
                if (m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="MapInput2DActions.AddCallbacks(IMapInput2DActions)" />
            /// <seealso cref="MapInput2DActions.RemoveCallbacks(IMapInput2DActions)" />
            /// <seealso cref="MapInput2DActions.UnregisterCallbacks(IMapInput2DActions)" />
            public void SetCallbacks(IMapInput2DActions instance)
            {
                foreach (var item in m_Wrapper.m_MapInput2DActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="MapInput2DActions" /> instance referencing this action map.
        /// </summary>
        public MapInput2DActions @MapInput2D => new MapInput2DActions(this);

        // Map Input 3D
        private readonly InputActionMap m_MapInput3D;
        private List<IMapInput3DActions> m_MapInput3DActionsCallbackInterfaces = new List<IMapInput3DActions>();
        private readonly InputAction m_MapInput3D_MoveMap;
        private readonly InputAction m_MapInput3D_RotateSideways;
        private readonly InputAction m_MapInput3D_MoveVertically;
        /// <summary>
        /// Provides access to input actions defined in input action map "Map Input 3D".
        /// </summary>
        public struct MapInput3DActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public MapInput3DActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "MapInput3D/MoveMap".
            /// </summary>
            public InputAction @MoveMap => m_Wrapper.m_MapInput3D_MoveMap;
            /// <summary>
            /// Provides access to the underlying input action "MapInput3D/RotateSideways".
            /// </summary>
            public InputAction @RotateSideways => m_Wrapper.m_MapInput3D_RotateSideways;
            /// <summary>
            /// Provides access to the underlying input action "MapInput3D/MoveVertically".
            /// </summary>
            public InputAction @MoveVertically => m_Wrapper.m_MapInput3D_MoveVertically;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_MapInput3D; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="MapInput3DActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(MapInput3DActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="MapInput3DActions" />
            public void AddCallbacks(IMapInput3DActions instance)
            {
                if (instance == null || m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Add(instance);
                @MoveMap.started += instance.OnMoveMap;
                @MoveMap.performed += instance.OnMoveMap;
                @MoveMap.canceled += instance.OnMoveMap;
                @RotateSideways.started += instance.OnRotateSideways;
                @RotateSideways.performed += instance.OnRotateSideways;
                @RotateSideways.canceled += instance.OnRotateSideways;
                @MoveVertically.started += instance.OnMoveVertically;
                @MoveVertically.performed += instance.OnMoveVertically;
                @MoveVertically.canceled += instance.OnMoveVertically;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="MapInput3DActions" />
            private void UnregisterCallbacks(IMapInput3DActions instance)
            {
                @MoveMap.started -= instance.OnMoveMap;
                @MoveMap.performed -= instance.OnMoveMap;
                @MoveMap.canceled -= instance.OnMoveMap;
                @RotateSideways.started -= instance.OnRotateSideways;
                @RotateSideways.performed -= instance.OnRotateSideways;
                @RotateSideways.canceled -= instance.OnRotateSideways;
                @MoveVertically.started -= instance.OnMoveVertically;
                @MoveVertically.performed -= instance.OnMoveVertically;
                @MoveVertically.canceled -= instance.OnMoveVertically;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MapInput3DActions.UnregisterCallbacks(IMapInput3DActions)" />.
            /// </summary>
            /// <seealso cref="MapInput3DActions.UnregisterCallbacks(IMapInput3DActions)" />
            public void RemoveCallbacks(IMapInput3DActions instance)
            {
                if (m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="MapInput3DActions.AddCallbacks(IMapInput3DActions)" />
            /// <seealso cref="MapInput3DActions.RemoveCallbacks(IMapInput3DActions)" />
            /// <seealso cref="MapInput3DActions.UnregisterCallbacks(IMapInput3DActions)" />
            public void SetCallbacks(IMapInput3DActions instance)
            {
                foreach (var item in m_Wrapper.m_MapInput3DActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="MapInput3DActions" /> instance referencing this action map.
        /// </summary>
        public MapInput3DActions @MapInput3D => new MapInput3DActions(this);

        // Editing Controls
        private readonly InputActionMap m_EditingControls;
        private List<IEditingControlsActions> m_EditingControlsActionsCallbackInterfaces = new List<IEditingControlsActions>();
        private readonly InputAction m_EditingControls_Undo;
        private readonly InputAction m_EditingControls_Redo;
        private readonly InputAction m_EditingControls_ToggleUI;
        /// <summary>
        /// Provides access to input actions defined in input action map "Editing Controls".
        /// </summary>
        public struct EditingControlsActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public EditingControlsActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "EditingControls/Undo".
            /// </summary>
            public InputAction @Undo => m_Wrapper.m_EditingControls_Undo;
            /// <summary>
            /// Provides access to the underlying input action "EditingControls/Redo".
            /// </summary>
            public InputAction @Redo => m_Wrapper.m_EditingControls_Redo;
            /// <summary>
            /// Provides access to the underlying input action "EditingControls/ToggleUI".
            /// </summary>
            public InputAction @ToggleUI => m_Wrapper.m_EditingControls_ToggleUI;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_EditingControls; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="EditingControlsActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(EditingControlsActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="EditingControlsActions" />
            public void AddCallbacks(IEditingControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_EditingControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_EditingControlsActionsCallbackInterfaces.Add(instance);
                @Undo.started += instance.OnUndo;
                @Undo.performed += instance.OnUndo;
                @Undo.canceled += instance.OnUndo;
                @Redo.started += instance.OnRedo;
                @Redo.performed += instance.OnRedo;
                @Redo.canceled += instance.OnRedo;
                @ToggleUI.started += instance.OnToggleUI;
                @ToggleUI.performed += instance.OnToggleUI;
                @ToggleUI.canceled += instance.OnToggleUI;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="EditingControlsActions" />
            private void UnregisterCallbacks(IEditingControlsActions instance)
            {
                @Undo.started -= instance.OnUndo;
                @Undo.performed -= instance.OnUndo;
                @Undo.canceled -= instance.OnUndo;
                @Redo.started -= instance.OnRedo;
                @Redo.performed -= instance.OnRedo;
                @Redo.canceled -= instance.OnRedo;
                @ToggleUI.started -= instance.OnToggleUI;
                @ToggleUI.performed -= instance.OnToggleUI;
                @ToggleUI.canceled -= instance.OnToggleUI;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="EditingControlsActions.UnregisterCallbacks(IEditingControlsActions)" />.
            /// </summary>
            /// <seealso cref="EditingControlsActions.UnregisterCallbacks(IEditingControlsActions)" />
            public void RemoveCallbacks(IEditingControlsActions instance)
            {
                if (m_Wrapper.m_EditingControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="EditingControlsActions.AddCallbacks(IEditingControlsActions)" />
            /// <seealso cref="EditingControlsActions.RemoveCallbacks(IEditingControlsActions)" />
            /// <seealso cref="EditingControlsActions.UnregisterCallbacks(IEditingControlsActions)" />
            public void SetCallbacks(IEditingControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_EditingControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_EditingControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="EditingControlsActions" /> instance referencing this action map.
        /// </summary>
        public EditingControlsActions @EditingControls => new EditingControlsActions(this);

        // Updaters Shared
        private readonly InputActionMap m_UpdatersShared;
        private List<IUpdatersSharedActions> m_UpdatersSharedActionsCallbackInterfaces = new List<IUpdatersSharedActions>();
        private readonly InputAction m_UpdatersShared_Placement;
        private readonly InputAction m_UpdatersShared_Deletion;
        /// <summary>
        /// Provides access to input actions defined in input action map "Updaters Shared".
        /// </summary>
        public struct UpdatersSharedActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public UpdatersSharedActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "UpdatersShared/Placement".
            /// </summary>
            public InputAction @Placement => m_Wrapper.m_UpdatersShared_Placement;
            /// <summary>
            /// Provides access to the underlying input action "UpdatersShared/Deletion".
            /// </summary>
            public InputAction @Deletion => m_Wrapper.m_UpdatersShared_Deletion;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_UpdatersShared; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="UpdatersSharedActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(UpdatersSharedActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="UpdatersSharedActions" />
            public void AddCallbacks(IUpdatersSharedActions instance)
            {
                if (instance == null || m_Wrapper.m_UpdatersSharedActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UpdatersSharedActionsCallbackInterfaces.Add(instance);
                @Placement.started += instance.OnPlacement;
                @Placement.performed += instance.OnPlacement;
                @Placement.canceled += instance.OnPlacement;
                @Deletion.started += instance.OnDeletion;
                @Deletion.performed += instance.OnDeletion;
                @Deletion.canceled += instance.OnDeletion;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="UpdatersSharedActions" />
            private void UnregisterCallbacks(IUpdatersSharedActions instance)
            {
                @Placement.started -= instance.OnPlacement;
                @Placement.performed -= instance.OnPlacement;
                @Placement.canceled -= instance.OnPlacement;
                @Deletion.started -= instance.OnDeletion;
                @Deletion.performed -= instance.OnDeletion;
                @Deletion.canceled -= instance.OnDeletion;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UpdatersSharedActions.UnregisterCallbacks(IUpdatersSharedActions)" />.
            /// </summary>
            /// <seealso cref="UpdatersSharedActions.UnregisterCallbacks(IUpdatersSharedActions)" />
            public void RemoveCallbacks(IUpdatersSharedActions instance)
            {
                if (m_Wrapper.m_UpdatersSharedActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="UpdatersSharedActions.AddCallbacks(IUpdatersSharedActions)" />
            /// <seealso cref="UpdatersSharedActions.RemoveCallbacks(IUpdatersSharedActions)" />
            /// <seealso cref="UpdatersSharedActions.UnregisterCallbacks(IUpdatersSharedActions)" />
            public void SetCallbacks(IUpdatersSharedActions instance)
            {
                foreach (var item in m_Wrapper.m_UpdatersSharedActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UpdatersSharedActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="UpdatersSharedActions" /> instance referencing this action map.
        /// </summary>
        public UpdatersSharedActions @UpdatersShared => new UpdatersSharedActions(this);

        // Ground Updater
        private readonly InputActionMap m_GroundUpdater;
        private List<IGroundUpdaterActions> m_GroundUpdaterActionsCallbackInterfaces = new List<IGroundUpdaterActions>();
        private readonly InputAction m_GroundUpdater_PickTile;
        /// <summary>
        /// Provides access to input actions defined in input action map "Ground Updater".
        /// </summary>
        public struct GroundUpdaterActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public GroundUpdaterActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "GroundUpdater/PickTile".
            /// </summary>
            public InputAction @PickTile => m_Wrapper.m_GroundUpdater_PickTile;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_GroundUpdater; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="GroundUpdaterActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(GroundUpdaterActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="GroundUpdaterActions" />
            public void AddCallbacks(IGroundUpdaterActions instance)
            {
                if (instance == null || m_Wrapper.m_GroundUpdaterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GroundUpdaterActionsCallbackInterfaces.Add(instance);
                @PickTile.started += instance.OnPickTile;
                @PickTile.performed += instance.OnPickTile;
                @PickTile.canceled += instance.OnPickTile;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="GroundUpdaterActions" />
            private void UnregisterCallbacks(IGroundUpdaterActions instance)
            {
                @PickTile.started -= instance.OnPickTile;
                @PickTile.performed -= instance.OnPickTile;
                @PickTile.canceled -= instance.OnPickTile;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GroundUpdaterActions.UnregisterCallbacks(IGroundUpdaterActions)" />.
            /// </summary>
            /// <seealso cref="GroundUpdaterActions.UnregisterCallbacks(IGroundUpdaterActions)" />
            public void RemoveCallbacks(IGroundUpdaterActions instance)
            {
                if (m_Wrapper.m_GroundUpdaterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="GroundUpdaterActions.AddCallbacks(IGroundUpdaterActions)" />
            /// <seealso cref="GroundUpdaterActions.RemoveCallbacks(IGroundUpdaterActions)" />
            /// <seealso cref="GroundUpdaterActions.UnregisterCallbacks(IGroundUpdaterActions)" />
            public void SetCallbacks(IGroundUpdaterActions instance)
            {
                foreach (var item in m_Wrapper.m_GroundUpdaterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GroundUpdaterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="GroundUpdaterActions" /> instance referencing this action map.
        /// </summary>
        public GroundUpdaterActions @GroundUpdater => new GroundUpdaterActions(this);

        // Height Updater
        private readonly InputActionMap m_HeightUpdater;
        private List<IHeightUpdaterActions> m_HeightUpdaterActionsCallbackInterfaces = new List<IHeightUpdaterActions>();
        private readonly InputAction m_HeightUpdater_DragSelection;
        /// <summary>
        /// Provides access to input actions defined in input action map "Height Updater".
        /// </summary>
        public struct HeightUpdaterActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public HeightUpdaterActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "HeightUpdater/DragSelection".
            /// </summary>
            public InputAction @DragSelection => m_Wrapper.m_HeightUpdater_DragSelection;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_HeightUpdater; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="HeightUpdaterActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(HeightUpdaterActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="HeightUpdaterActions" />
            public void AddCallbacks(IHeightUpdaterActions instance)
            {
                if (instance == null || m_Wrapper.m_HeightUpdaterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HeightUpdaterActionsCallbackInterfaces.Add(instance);
                @DragSelection.started += instance.OnDragSelection;
                @DragSelection.performed += instance.OnDragSelection;
                @DragSelection.canceled += instance.OnDragSelection;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="HeightUpdaterActions" />
            private void UnregisterCallbacks(IHeightUpdaterActions instance)
            {
                @DragSelection.started -= instance.OnDragSelection;
                @DragSelection.performed -= instance.OnDragSelection;
                @DragSelection.canceled -= instance.OnDragSelection;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HeightUpdaterActions.UnregisterCallbacks(IHeightUpdaterActions)" />.
            /// </summary>
            /// <seealso cref="HeightUpdaterActions.UnregisterCallbacks(IHeightUpdaterActions)" />
            public void RemoveCallbacks(IHeightUpdaterActions instance)
            {
                if (m_Wrapper.m_HeightUpdaterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="HeightUpdaterActions.AddCallbacks(IHeightUpdaterActions)" />
            /// <seealso cref="HeightUpdaterActions.RemoveCallbacks(IHeightUpdaterActions)" />
            /// <seealso cref="HeightUpdaterActions.UnregisterCallbacks(IHeightUpdaterActions)" />
            public void SetCallbacks(IHeightUpdaterActions instance)
            {
                foreach (var item in m_Wrapper.m_HeightUpdaterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HeightUpdaterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="HeightUpdaterActions" /> instance referencing this action map.
        /// </summary>
        public HeightUpdaterActions @HeightUpdater => new HeightUpdaterActions(this);

        // Decoration Updater
        private readonly InputActionMap m_DecorationUpdater;
        private List<IDecorationUpdaterActions> m_DecorationUpdaterActionsCallbackInterfaces = new List<IDecorationUpdaterActions>();
        private readonly InputAction m_DecorationUpdater_DeleteSingleObject;
        private readonly InputAction m_DecorationUpdater_SmoothObjectRotate;
        private readonly InputAction m_DecorationUpdater_SnappyObjectRotate;
        /// <summary>
        /// Provides access to input actions defined in input action map "Decoration Updater".
        /// </summary>
        public struct DecorationUpdaterActions
        {
            private @DPInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public DecorationUpdaterActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "DecorationUpdater/DeleteSingleObject".
            /// </summary>
            public InputAction @DeleteSingleObject => m_Wrapper.m_DecorationUpdater_DeleteSingleObject;
            /// <summary>
            /// Provides access to the underlying input action "DecorationUpdater/SmoothObjectRotate".
            /// </summary>
            public InputAction @SmoothObjectRotate => m_Wrapper.m_DecorationUpdater_SmoothObjectRotate;
            /// <summary>
            /// Provides access to the underlying input action "DecorationUpdater/SnappyObjectRotate".
            /// </summary>
            public InputAction @SnappyObjectRotate => m_Wrapper.m_DecorationUpdater_SnappyObjectRotate;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_DecorationUpdater; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="DecorationUpdaterActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(DecorationUpdaterActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="DecorationUpdaterActions" />
            public void AddCallbacks(IDecorationUpdaterActions instance)
            {
                if (instance == null || m_Wrapper.m_DecorationUpdaterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DecorationUpdaterActionsCallbackInterfaces.Add(instance);
                @DeleteSingleObject.started += instance.OnDeleteSingleObject;
                @DeleteSingleObject.performed += instance.OnDeleteSingleObject;
                @DeleteSingleObject.canceled += instance.OnDeleteSingleObject;
                @SmoothObjectRotate.started += instance.OnSmoothObjectRotate;
                @SmoothObjectRotate.performed += instance.OnSmoothObjectRotate;
                @SmoothObjectRotate.canceled += instance.OnSmoothObjectRotate;
                @SnappyObjectRotate.started += instance.OnSnappyObjectRotate;
                @SnappyObjectRotate.performed += instance.OnSnappyObjectRotate;
                @SnappyObjectRotate.canceled += instance.OnSnappyObjectRotate;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="DecorationUpdaterActions" />
            private void UnregisterCallbacks(IDecorationUpdaterActions instance)
            {
                @DeleteSingleObject.started -= instance.OnDeleteSingleObject;
                @DeleteSingleObject.performed -= instance.OnDeleteSingleObject;
                @DeleteSingleObject.canceled -= instance.OnDeleteSingleObject;
                @SmoothObjectRotate.started -= instance.OnSmoothObjectRotate;
                @SmoothObjectRotate.performed -= instance.OnSmoothObjectRotate;
                @SmoothObjectRotate.canceled -= instance.OnSmoothObjectRotate;
                @SnappyObjectRotate.started -= instance.OnSnappyObjectRotate;
                @SnappyObjectRotate.performed -= instance.OnSnappyObjectRotate;
                @SnappyObjectRotate.canceled -= instance.OnSnappyObjectRotate;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DecorationUpdaterActions.UnregisterCallbacks(IDecorationUpdaterActions)" />.
            /// </summary>
            /// <seealso cref="DecorationUpdaterActions.UnregisterCallbacks(IDecorationUpdaterActions)" />
            public void RemoveCallbacks(IDecorationUpdaterActions instance)
            {
                if (m_Wrapper.m_DecorationUpdaterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="DecorationUpdaterActions.AddCallbacks(IDecorationUpdaterActions)" />
            /// <seealso cref="DecorationUpdaterActions.RemoveCallbacks(IDecorationUpdaterActions)" />
            /// <seealso cref="DecorationUpdaterActions.UnregisterCallbacks(IDecorationUpdaterActions)" />
            public void SetCallbacks(IDecorationUpdaterActions instance)
            {
                foreach (var item in m_Wrapper.m_DecorationUpdaterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DecorationUpdaterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="DecorationUpdaterActions" /> instance referencing this action map.
        /// </summary>
        public DecorationUpdaterActions @DecorationUpdater => new DecorationUpdaterActions(this);
        private int m_MouseandKeyboardSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme MouseandKeyboardScheme
        {
            get
            {
                if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
                return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
            }
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
        public interface IUIActions
        {
            /// <summary>
            /// Method invoked when associated input action "Navigate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnNavigate(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Submit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSubmit(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnCancel(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Point" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPoint(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnClick(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "ScrollWheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnScrollWheel(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "MiddleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMiddleClick(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRightClick(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "TrackedDevicePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnTrackedDevicePosition(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "TrackedDeviceOrientation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Map Input Shared" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="MapInputSharedActions.AddCallbacks(IMapInputSharedActions)" />
        /// <seealso cref="MapInputSharedActions.RemoveCallbacks(IMapInputSharedActions)" />
        public interface IMapInputSharedActions
        {
            /// <summary>
            /// Method invoked when associated input action "Boost" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnBoost(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Alt Boost" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnAltBoost(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Focus Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnFocusPosition(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Map Input 2D" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="MapInput2DActions.AddCallbacks(IMapInput2DActions)" />
        /// <seealso cref="MapInput2DActions.RemoveCallbacks(IMapInput2DActions)" />
        public interface IMapInput2DActions
        {
            /// <summary>
            /// Method invoked when associated input action "Move Map" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMoveMap(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Zoom In/Out" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnZoomInOut(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Turn Camera Clockwise" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnTurnCameraClockwise(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Turn Camera Counterclockwise" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnTurnCameraCounterclockwise(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Map Input 3D" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="MapInput3DActions.AddCallbacks(IMapInput3DActions)" />
        /// <seealso cref="MapInput3DActions.RemoveCallbacks(IMapInput3DActions)" />
        public interface IMapInput3DActions
        {
            /// <summary>
            /// Method invoked when associated input action "Move Map" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMoveMap(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Rotate Sideways" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRotateSideways(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Move Vertically" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMoveVertically(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Editing Controls" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="EditingControlsActions.AddCallbacks(IEditingControlsActions)" />
        /// <seealso cref="EditingControlsActions.RemoveCallbacks(IEditingControlsActions)" />
        public interface IEditingControlsActions
        {
            /// <summary>
            /// Method invoked when associated input action "Undo" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnUndo(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Redo" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRedo(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Toggle UI" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnToggleUI(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Updaters Shared" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="UpdatersSharedActions.AddCallbacks(IUpdatersSharedActions)" />
        /// <seealso cref="UpdatersSharedActions.RemoveCallbacks(IUpdatersSharedActions)" />
        public interface IUpdatersSharedActions
        {
            /// <summary>
            /// Method invoked when associated input action "Placement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPlacement(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Deletion" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnDeletion(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Ground Updater" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="GroundUpdaterActions.AddCallbacks(IGroundUpdaterActions)" />
        /// <seealso cref="GroundUpdaterActions.RemoveCallbacks(IGroundUpdaterActions)" />
        public interface IGroundUpdaterActions
        {
            /// <summary>
            /// Method invoked when associated input action "Pick Tile" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPickTile(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Height Updater" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="HeightUpdaterActions.AddCallbacks(IHeightUpdaterActions)" />
        /// <seealso cref="HeightUpdaterActions.RemoveCallbacks(IHeightUpdaterActions)" />
        public interface IHeightUpdaterActions
        {
            /// <summary>
            /// Method invoked when associated input action "Drag Selection" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnDragSelection(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Decoration Updater" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="DecorationUpdaterActions.AddCallbacks(IDecorationUpdaterActions)" />
        /// <seealso cref="DecorationUpdaterActions.RemoveCallbacks(IDecorationUpdaterActions)" />
        public interface IDecorationUpdaterActions
        {
            /// <summary>
            /// Method invoked when associated input action "Delete Single Object" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnDeleteSingleObject(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Smooth Object Rotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSmoothObjectRotate(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Snappy Object Rotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSnappyObjectRotate(InputAction.CallbackContext context);
        }
    }
}
